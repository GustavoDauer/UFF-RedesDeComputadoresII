/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.RSAdecrypterController;
import Controller.RSAencripterController;
import Model.RSAdecrypter;
import Model.RSAencripter;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author gustavo
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        decriptPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        encriptFile = new javax.swing.JTextField();
        encriptOutputFile = new javax.swing.JTextField();
        selectFile = new javax.swing.JButton();
        startEncrypt = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        nKey = new javax.swing.JTextField();
        eKey = new javax.swing.JTextField();
        nKeyDecript = new javax.swing.JTextField();
        dKey = new javax.swing.JTextField();
        startDecript = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        decriptOutputFile = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        decriptFile = new javax.swing.JTextField();
        selectFileDecript = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        results = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        decriptPane.setBackground(new java.awt.Color(254, 254, 254));
        decriptPane.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(234, 234, 234));

        jLabel1.setForeground(new java.awt.Color(143, 1, 1));
        jLabel1.setText("Arquivo de Entrada para Encriptação");

        jLabel2.setForeground(new java.awt.Color(143, 1, 1));
        jLabel2.setText("Arquivo de Saída Encriptado");

        selectFile.setForeground(new java.awt.Color(143, 1, 1));
        selectFile.setText("Selecionar arquivo");
        selectFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                selectFileMouseReleased(evt);
            }
        });

        startEncrypt.setBackground(new java.awt.Color(250, 223, 226));
        startEncrypt.setForeground(new java.awt.Color(143, 1, 1));
        startEncrypt.setText("Iniciar Encriptação");
        startEncrypt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startEncryptMouseClicked(evt);
            }
        });
        startEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startEncryptActionPerformed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(143, 1, 1));
        jLabel5.setText("Chave de Encriptaçao (n, e)");

        nKey.setText("256");

        eKey.setText("0");

        nKeyDecript.setText("0");

        dKey.setText("0");

        startDecript.setText("Iniciar Decriptação");
        startDecript.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                startDecriptMouseReleased(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(143, 1, 1));
        jLabel7.setText("Arquivo de Saída Decriptado");

        jLabel8.setForeground(new java.awt.Color(143, 1, 1));
        jLabel8.setText("Arquivo de Entrada para Decriptação");

        selectFileDecript.setForeground(new java.awt.Color(143, 1, 1));
        selectFileDecript.setText("Selecionar arquivo");
        selectFileDecript.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                selectFileDecriptMouseReleased(evt);
            }
        });

        reset.setText("Resetar Interação");
        reset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resetMouseReleased(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(143, 1, 1));
        jLabel6.setText("Chave de Decriptação (n, d)");

        results.setColumns(20);
        results.setLineWrap(true);
        results.setRows(5);
        jScrollPane1.setViewportView(results);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(startEncrypt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startDecript)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reset))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(decriptOutputFile, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                                    .addComponent(decriptFile, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(encriptOutputFile, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(nKeyDecript, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(dKey))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(nKey, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(eKey, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(9, 9, 9)
                                .addComponent(selectFileDecript))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(encriptFile, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectFile)))
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(encriptFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(encriptOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(decriptFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFileDecript))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(decriptOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(nKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nKeyDecript, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startEncrypt)
                    .addComponent(startDecript)
                    .addComponent(reset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );

        decriptPane.addTab("Trabalho 2 - Redes II", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(decriptPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(decriptPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startEncryptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startEncryptMouseClicked
        // TODO add your handling code here:
        RSAencripterController eController = new RSAencripterController(encriptOutputFile.getText(), results);
        Path path = Paths.get(encriptFile.getText());

        if (verifyEncript()) {
            try {
                byte[] data = Files.readAllBytes(path);

                short n = Short.parseShort(nKey.getText());
                int publick = Integer.parseInt(eKey.getText());

                short[] encrypted = RSAencripter.encrypt(data, n, publick);
                eController.writeFile(encrypted);

            } catch (IOException e) {
                JOptionPane.showMessageDialog(rootPane, "Problema inesperado na leitura/escrita dos arquivos selecionados\n\nVerifique se o arquivo de entrada existe e as permissões do diretório." + e.getMessage() + "\n\n", "Erro: Problema na leitura/escrita dos arquivos", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage() + "\n\n", "Erro!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_startEncryptMouseClicked

    private void selectFileMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectFileMouseReleased
        JFileChooser jfileChooser = new JFileChooser();
        jfileChooser.showOpenDialog(this);
        if (jfileChooser.getSelectedFile() != null) {
            encriptFile.setText(jfileChooser.getSelectedFile().getAbsolutePath());
            encriptOutputFile.setText(encriptFile.getText().concat("-encripted"));
            decriptFile.setText(encriptOutputFile.getText());
            decriptOutputFile.setText(encriptOutputFile.getText().concat("-decripted"));
        }
    }//GEN-LAST:event_selectFileMouseReleased

    private void startDecriptMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startDecriptMouseReleased
        RSAdecrypterController dController = new RSAdecrypterController(decriptOutputFile.getText(), results);
        Path path = Paths.get(decriptFile.getText());

        if (verifyDecript()) {
            try {
                short nD = Short.parseShort(nKeyDecript.getText());
                int privatek = Integer.parseInt(dKey.getText());

                byte[] data = Files.readAllBytes(path);

                if ((data.length % 2) == 0) {
                    short[] encrypted = new short[data.length];

                    int j = 0;
                    for (int i = 0; i < data.length; i += 2) {
                        short bshort = RSAdecrypter.twoBytesToShort(data[i], data[i + 1]);
                        encrypted[j] = bshort;
                        j++;
                    }

                    byte[] decrypted = RSAdecrypter.decrypt(encrypted, nD, privatek);

                    dController.writeFile(decrypted);
                } else {
                    throw new Exception("Número de bytes ímpar! Abortando operação!");
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(rootPane, "Problema inesperado na leitura/escrita dos arquivos selecionados\n\nVerifique se o arquivo de entrada existe e as permissões do diretório." + e.getMessage() + "\n\n", "Erro: Problema na leitura/escrita dos arquivos", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage() + "\n\n", "Erro!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_startDecriptMouseReleased

    private void selectFileDecriptMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectFileDecriptMouseReleased
        JFileChooser jfileChooser = new JFileChooser();
        jfileChooser.showOpenDialog(this);
        if (jfileChooser.getSelectedFile() != null) {
            decriptFile.setText(jfileChooser.getSelectedFile().getAbsolutePath());
            decriptOutputFile.setText(decriptFile.getText().concat("-decripted"));
        }
    }//GEN-LAST:event_selectFileDecriptMouseReleased

    private void resetMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetMouseReleased
        encriptFile.setText("");
        encriptOutputFile.setText("");
        decriptFile.setText("");
        decriptOutputFile.setText("");
        results.setText("");
        nKey.setText("2881");
        eKey.setText("1625");
        nKeyDecript.setText("2881");
        dKey.setText("29");
    }//GEN-LAST:event_resetMouseReleased

    private void startEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startEncryptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startEncryptActionPerformed

    public boolean verifyEncript() {
        try {
            int n = Integer.parseInt(nKey.getText());
            int e = Integer.parseInt(eKey.getText());

            if (!(255 < n)) {
                nKey.setText("256");
                JOptionPane.showMessageDialog(rootPane, "O valor minimo para n e 256!", "Erro: Valor minimo excedido!", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            if (!(65536 > n)) {
                nKey.setText("65535");
                JOptionPane.showMessageDialog(rootPane, "O valor máximo para n e 65535!", "Erro: Valor máximo excedido!", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(rootPane, "Entre apenas números nos campos das chaves!", "Erro: Entrada não é um número!", JOptionPane.ERROR_MESSAGE);
        }

        if (encriptOutputFile.getText().equals("") || encriptFile.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Não foi selecionado um arquivo de entrada ou saída!", "Erro: Arquivo não foi selecionado", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    public boolean verifyDecript() {
        try {
            int n = Integer.parseInt(nKeyDecript.getText());
            int d = Integer.parseInt(dKey.getText());

            if (!(255 < n)) {
                nKeyDecript.setText("256");
                JOptionPane.showMessageDialog(rootPane, "O valor minimo para n e 256!", "Erro: Valor minimo excedido!", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            if (!(65536 > n)) {
                nKeyDecript.setText("65535");
                JOptionPane.showMessageDialog(rootPane, "O valor máximo para n e 65535!", "Erro: Valor máximo excedido!", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(rootPane, "Entre apenas números nos campos das chaves!", "Erro: Entrada não é um número!", JOptionPane.ERROR_MESSAGE);
        }

        if (decriptOutputFile.getText().equals("") || decriptFile.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Não foi selecionado um arquivo de entrada ou saída!", "Erro: Arquivo não foi selecionado", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow mainWindow = new MainWindow();
                mainWindow.setExtendedState(MAXIMIZED_BOTH);
                mainWindow.setVisible(true);

                mainWindow.nKey.setText("2881");
                mainWindow.eKey.setText("1625");
                mainWindow.nKeyDecript.setText("2881");
                mainWindow.dKey.setText("29");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dKey;
    private javax.swing.JTextField decriptFile;
    private javax.swing.JTextField decriptOutputFile;
    private javax.swing.JTabbedPane decriptPane;
    private javax.swing.JTextField eKey;
    private javax.swing.JTextField encriptFile;
    private javax.swing.JTextField encriptOutputFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nKey;
    private javax.swing.JTextField nKeyDecript;
    private javax.swing.JButton reset;
    private javax.swing.JTextArea results;
    private javax.swing.JButton selectFile;
    private javax.swing.JButton selectFileDecript;
    private javax.swing.JButton startDecript;
    private javax.swing.JButton startEncrypt;
    // End of variables declaration//GEN-END:variables
}
